package com.Linkdin.linkdinbackend.features.feed.model;

import com.Linkdin.linkdinbackend.features.authentication.model.AuthenticationUser;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

// 🧱 Entity means this class will become a table in the database!
// 💬 Every comment made by a user will be stored here.
@Setter
@Getter
@Entity(name = "comments")
public class Comment {

    // 🆔 Primary key of the table! Auto-generated by the database 🚀
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // 🔗 Relationship: MANY comments belong to ONE post 📌
    // ❗ This field links each comment to its parent post
    // 🛑 We use @JsonIgnore to avoid infinite loops when converting to JSON (avoid recursion).
    @ManyToOne
    @JoinColumn(name = "post_id", nullable = false)
    @JsonIgnore
    private Post post;

    // 🧑‍💻 Relationship: MANY comments can be written by ONE user 👤
    // ➕ It connects the comment to the author (AuthenticationUser)
    @ManyToOne
    @JoinColumn(name = "author_id", nullable = false)
    private AuthenticationUser author;

    // ✍️ The actual comment content (like "Nice post! 😄")
    @Column(nullable = false)
    private String content;

    // 🕰️ Automatically captures the time the comment was created
    // ✨ Magic provided by Hibernate’s @CreationTimestamp
    @CreationTimestamp
    private LocalDateTime creationDate;

    // 🕰️ Stores the last time the comment was updated (if edited)
    private LocalDateTime updatedDate;

    // 🛠️ Default constructor – required by JPA
    public Comment() {
    }

    // 🎯 Custom constructor to quickly create a comment object
    public Comment(Post post, AuthenticationUser author, String content) {
        this.post = post;
        this.author = author;
        this.content = content;
    }

    // 🕰️ This method is called automatically just before an update happens
    // 📌 It updates the `updatedDate` so we always know the last edit time
    @PreUpdate
    public void preUpdate() {
        this.updatedDate = LocalDateTime.now();
    }

    // ⬇️ Standard Getters and Setters ⬇️
    // 📦 Get and set the values of all the fields
    // 🚪 These are like the in/out gates for data

}

